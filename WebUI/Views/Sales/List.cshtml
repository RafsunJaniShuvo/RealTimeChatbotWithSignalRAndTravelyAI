@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject IConfiguration Configuration
@{
    Layout = "_Layout";
}
@section Styles {

    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />
    <style>
        .select2-container--bootstrap-5 .select2-search {
            display: none !important;
        }
    </style>
}

<div class="content-wrapper">
    <div class="container-fluid py-4">
        <div class="text-center" id="salesTableLoader">
            <div class="spinner-border" role="status">
                <span class="visually-hidden"></span>
            </div>
        </div>
        <div class="card shadow-sm mx-auto" style="max-width: 1100px;">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h3 class="card-title mb-0">Sales List</h3>
                    <button type="button" id="createSales" class="btn btn-success btn-sm" >
                        <i class="fas fa-plus me-1"></i>
                        Create Sales
                    </button>
                </div>
               
                <div class="table-responsive">
                    <table id="salesTable"
                           class="table table-striped table-bordered w-100 text-center">
                        <thead class="table-dark">
                            <tr>
                                <th scope="col">ID</th>
                                <th scope="col">Product Name</th>
                                <th scope="col">Solf Quantity</th>
                                <th scope="col">Total Price</th>
                                <th scope="col"> Date</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>

            </div>
        </div>
    </div>
</div>
<div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true" id="CreateSalesModalId">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="createSalesForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="salesModalHeader">Create Sale</h5>
                    <button type="button" class="close modalClose" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <input type="hidden" id="ProductId" />
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="Name">Product Name</label>
                                <select id="products-list" class="form-select ">
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="quantity">Quantity</label>
                                <input type="number" class="form-control" id="quantity" name="Price" placeholder="Quantity" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="totalPrice">Total Sale Price</label>
                                <input type="number" class="form-control" id="totalPrice" name="totalPrice" disabled />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary modalClose" data-dismiss="modal ">Close</button>
                    <button type="button" class="btn btn-primary" id="submitSale">Create Sale</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {

    <!-- Select2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    <script>
        $(document).ready(function () {
            $('#products-list').select2({
                placeholder: "Select a product...",
                minimumResultsForSearch: Infinity, // Hides search
                allowClear: true,
                width: '100%',
                theme: 'bootstrap-5' 
            });
        });
    </script>
    <script>
        // grab the JWT from session
        var token = '@(HttpContextAccessor.HttpContext.Session.GetString("JWToken") ?? "")';
        var apiBaseUrl = "@Configuration["WebApiBaseUrl"]";
        var price = 0;
        var stock = 0;
        $(document).ready(function () {

            $('#salesTable').DataTable({
                processing: false,
                serverSide: false,
                ajax: {
                    url: `${apiBaseUrl}/api/Sales/GetAllSales`,
                    type: 'GET',
                    dataSrc: function (json) {
                        return json.data || json; 
                    },
                    beforeSend: function (xhr) {
                        $('#salesTableLoader').show();
                        $('#salesTable').hide();
                        xhr.setRequestHeader('Authorization', 'Bearer ' + token);
                    },
                    complete: function () {
                        $('#salesTableLoader').hide();
                        $('#salesTable').show();
                    },
                    error: function (xhr, error, thrown) {
                        console.error("AJAX error:", xhr.responseJSON);
                    }
                },
                columns: [
                    { data: 'id', title: 'Sale ID' },
                    {
                        data: 'product.name',
                        title: 'Product',
                        render: function (data, type, row) {
                            // Access the nested product name
                            return row.product ? row.product.name : 'N/A';
                        }
                    },
                    {
                        data: 'quantitySold',
                        title: 'Qty Sold'
                    },
                    {
                        data: 'product.price',
                        title: 'Unit Price',
                        render: function (data, type, row) {
                            // Format the nested product price
                            return row.product ? $.fn.dataTable.render.number(',', '.', 2, '$').display(row.product.price) : 'N/A';
                        }
                    },
                    {
                        data: 'totalPrice',
                        title: 'Total Price',
                        render: $.fn.dataTable.render.number(',', '.', 2, '$')
                    },
                    {
                        data: 'saleDate',
                        title: 'Sale Date',
                        render: function (data) {
                            return data ? new Date(data).toLocaleDateString() : '';
                        }
                    },
                    {
                        data: 'currentStock',
                        title: 'Current Stock',
                        // render: function (data, type, row) {
                        //     debugger
                        //     return row.product ? row.product.stockQty : 'N/A';
                        // }
                    }
                ],
                paging: true,
                pageLength: 10,
                lengthChange: true,
                searching: true,
                ordering: true,
                responsive: true,
            });

            $('#submitSale').click(function (e) {
                e.preventDefault(); 
                var saleData = {
                    ProductId: parseInt($('#products-list').val()),
                    QuantitySold: parseInt($('#quantity').val()) 
                };
                if (!saleData.ProductId) {
                    toastr["warning"]("Please select a product!", "")
                    return;
                }
                if (isNaN(saleData.QuantitySold) || saleData.QuantitySold <= 0) {
                    toastr["warning"]("Please enter a valid quantity!", "")
                    return;
                }

                $.ajax({
                    type: 'POST',
                    url: `${apiBaseUrl}/api/Sales/Create`,
                    contentType: 'application/json',
                    data: JSON.stringify(saleData),
                    headers: {
                        'Authorization': 'Bearer ' + token
                    },
                    success: function (response) {
                        toastr["success"]("Sale recorded successfully!", "")
                        // Reset form
                        $('#createSalesForm')[0].reset();
                        // Refresh DataTable if exists
                        if ($.fn.DataTable.isDataTable('#salesTable')) {
                            $('#salesTable').DataTable().ajax.reload(null, false);
                        }
                        // Close modal if in one
                        if ($('#CreateSalesModalId').length) {
                            $('#CreateSalesModalId').modal('hide');
                        }
                    },
                    error: function (xhr) {
                        // Better error handling
                        let errorMsg = 'Error recording sale';
                        if (xhr.responseJSON) {
                            if (xhr.responseJSON.errors) {
                                errorMsg = Object.values(xhr.responseJSON.errors).join('\n');
                            } else if (xhr.responseJSON.message) {
                                errorMsg = xhr.responseJSON.message;
                            }
                        }
                        toastr["error"]("Error", `${errorMsg}`)
                    }
                });
            });

            $('#createSales').click(function (e) {
                $.ajax({
                    url: `${apiBaseUrl}/api/Products/GetProductsForSale`,
                    type: 'GET', 
                    headers: {
                        'Authorization': 'Bearer ' + token  
                    },
                    success: function (data) {
                        debugger
                        console.log("Success:", data);
                        $('#CreateSalesModalId').modal('show');
                        $('#products-list').empty().append('<option value="">-- Please select --</option>');
                        data.forEach(product => {
                            if (!product.isDeleted && product.stockQty > 0) {
                                $('#products-list').append(`<option value="${product.id}"
                                                 data-price="${product.price}"
                                                 data-stock="${product.stockQty}">
                                                 ${product.name}
                                                </option>`);
                            }
                        });
                    },
                    error: function (xhr, status, error) {
                         toastr["error"]("Error", `${error}`)
                        
                    }
                });

            });

            $('#products-list').change(function () {
                const selectedOption = $(this).find('option:selected');
                 price = selectedOption.data('price');
                 stock = selectedOption.data('stock');
                calculateTotal();
            });
            
            $('#quantity').on('input', function () {
                calculateTotal();
                //validateStock();
            });

            $('.modalClose').click(function(){
                $('#CreateSalesModalId').modal('hide');
            })
        });
        function calculateTotal() {
            const quantity = parseInt($('#quantity').val()) || 0;
            const total = (quantity * price).toFixed(2);
            $('#totalPrice').val(total);
        }
        function validateStock() {
            const selectedOption = $('#productSelect option:selected');
            const stock = parseInt(selectedOption.data('stock')) || 0;
            const quantity = parseInt($('#quantity').val()) || 0;

            if (quantity > stock) {
                toastr["error"]("Opps!",`Not enough stock. Available: ${stock}`);
                return false;
            }
            return true;
        }
    </script>
}

