@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject IConfiguration Configuration

@{
    Layout = "_Layout";
}

<div class="content-wrapper">
    <div class="container-fluid py-4">
        <div class="text-center" id="prodsuctTableLoader">
            <div class="spinner-border" role="status">
                <span class="visually-hidden"></span>
            </div>
        </div>
        <div class="card shadow-sm mx-auto" style="max-width: 1100px;">
            <div class="card-body">

                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h3 class="card-title mb-0">Product List</h3>
                    <button type="button" id="createProduct" class="btn btn-success btn-sm" data-toggle="modal" data-target=".bd-example-modal-lg">
                        <i class="fas fa-plus me-1"></i>
                        Create Product
                    </button>
                </div>

                <div class="table-responsive">
                    <table id="productsTable"
                           class="table table-striped table-bordered w-100 text-center">
                        <thead class="table-dark">
                            <tr>
                                <th scope="col">ID</th>
                                <th scope="col">Name</th>
                                <th scope="col">SKU</th>
                                <th scope="col">Price</th>
                                <th scope="col">Stock Qty</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>

            </div>
        </div>
    </div>
</div>
<div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true" id="CreateProductModalId">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="createProductForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="productModalHeader">Create Product</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <input type="hidden" id="ProductId" />
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="Name">Product Name</label>
                                <input type="text" class="form-control" id="Name" name="Name" placeholder="Name" required />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="SKU">SKU</label>
                                <input type="text" class="form-control" id="SKU" name="SKU" placeholder="Sku" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="Price">Price</label>
                                <input type="number" step="0.01" class="form-control" id="Price" name="Price" placeholder="Price" required />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="StockQty">Stock Quantity</label>
                                <input type="number" class="form-control" id="StockQty" name="StockQty" placeholder="Stock Qty" required />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label for="Description">Description</label>
                                <textarea class="form-control" id="Description" name="Description" placeholder="Description"></textarea>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary" id="CreateProduct">Create Product</button>
                    <button type="button" class="btn btn-primary" id="UpdateProduct" hidden>Update Product</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var token = '@(HttpContextAccessor.HttpContext.Session.GetString("JWToken") ?? "")';
        var apiBaseUrl = "@Configuration["WebApiBaseUrl"]";
        $(document).ready(function () {
            // grab the JWT from session
            $('#productsTable').DataTable({
                processing: true,
                serverSide: true,
                ajax: {
                    url: `${apiBaseUrl}/api/Products/GetAllProduct`,
                    type: 'GET',
                    data: function (d) {
                        return {
                            draw: d.draw,
                            page: (d.start / d.length) + 1,
                            pageSize: d.length,
                            search: d.search.value
                        };
                    },
                    dataSrc: function (json) {
                        return json.data;
                    },
                    beforeSend: function (xhr) {
                        $('#prodsuctTableLoader').show();
                        $('#productsTable').hide();
                        xhr.setRequestHeader('Authorization', 'Bearer ' + token);
                    },
                    complete: function () {
                        $('#prodsuctTableLoader').hide();
                        $('#productsTable').show();
                    },
                    error: function (xhr, error, thrown) {
                        console.error("DataTables AJAX error:", error, thrown);
                    }
                },
                columns: [
                    { data: 'id' },
                    { data: 'name' },
                    { data: 'sku' },
                    { data: 'price' },
                    { data: 'stockQty' },
                    {
                        data: null,
                        title: 'Actions',
                        orderable: false,
                        render: function (data, type, row) {
                            return `
                                                        <button class="btn btn-sm btn-primary editBtn" data-id="${row.id}" onclick="EditProductItem(${row.id})"> <i class="fas fa-edit" ></i></button>
                                                        <button class="btn btn-sm btn-danger deleteBtn" data-id="${row.id}" onclick="softDeleteProduct(this,${row.id})"> <i class="fas fa-trash-alt" ></i></button>
                                            `;
                        }
                    }
                ],
                paging: true,
                pageLength: 10
            });



            $('#createProductForm').submit(function (e) {
                e.preventDefault();

                // Convert form data to object
                var formData = $(this).serializeArray();
                var jsonData = {};

                $.each(formData, function (_, field) {
                    jsonData[field.name] = field.value;
                });

                $.ajax({
                    type: 'POST',
                    url: `${apiBaseUrl}/api/Products/CreateProduct`,
                    contentType: 'application/json', // ← Add this
                    data: JSON.stringify(jsonData), // ← Convert to JSON string
                    headers: {
                        'Authorization': 'Bearer ' + token
                    },
                    success: function (response) {
                        toastr["success"]("Product created successfully!", "")
                        $('#createProductForm')[0].reset();
                        $('#CreateProductModalId').modal('hide');

                        if ($.fn.DataTable.isDataTable('#productsTable')) {
                            $('#productsTable').DataTable().ajax.reload(null, false); // false = retain current page
                        }
                    },
                    error: function (xhr, status, error) {
                        toastr["error"](`${xhr.responseText}`, "")
                    }
                });
            });

            $('#UpdateProduct').click(function (e) {
                var productId = $('#ProductId').val();

                var productData = {
                    Name: $('#Name').val(),
                    SKU: $('#SKU').val(),
                    Price: parseFloat($('#Price').val()),
                    StockQty: parseInt($('#StockQty').val()),
                    Description: $('#Description').val()
                };
                $.ajax({
                    url: `${apiBaseUrl}/api/products/UpdateById/` + productId,
                    type: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(productData),
                    headers: {
                        'Authorization': 'Bearer ' + token
                    },
                    success: function (response) {
                        toastr["success"]("Product updated successfully!", "")
                        $('#CreateProductModalId').modal('hide');
                        if ($.fn.DataTable.isDataTable('#productsTable')) {
                            $('#productsTable').DataTable().ajax.reload(null, false);
                        }
                    },
                    error: function (xhr, status, error) {
                        toastr["error"](`${xhr.responseText}`, "")
                    }
                });
            });

        });


        function EditProductItem(productId) {
            $.ajax({
                url: `${apiBaseUrl}/api/products/${productId}`,
                type: 'GET',
                dataType: 'json',
                headers: {
                    'Authorization': `Bearer ${token}`
                },
                success: function (product) {
                    $('#productModalHeader').text('Update Product');
                    $('#CreateProductModalId').modal('show');
                    $('#ProductId').val(product.id);
                    $('#Name').val(product.name);
                    $('#SKU').val(product.sku);
                    $('#Price').val(product.price);
                    $('#StockQty').val(product.stockQty);
                    $('#Description').val(product.description);
                    $('#CreateProduct').hide();
                    $('#UpdateProduct').removeAttr('hidden');
                },
                error: function (xhr, status, error) {
                    if (xhr.status === 404) {
                        toastr["warning"]("Product not found!", "")
                    } else {
                        toastr["error"]("Error fetching product!", "")
                    }
                }
            });
        }


        function softDeleteProduct(row, productId) {
            if (!token) {
                toastr.warning("Authentication required!");
                return;
            }

            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'Cancel',
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `${apiBaseUrl}/api/products/${productId}`,
                        type: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        },
                        success: function (response) {
                            row.closest('tr').remove();
                            Swal.fire(
                                'Deleted!',
                                'Product has been deleted.',
                                'success'
                            );

                            // Refresh DataTable if exists
                            if ($.fn.DataTable.isDataTable('#productsTable')) {
                                $('#productsTable').DataTable().ajax.reload(null, false);
                            }
                        },
                        error: function (xhr) {
                            const errorMsg = xhr.responseJSON?.message || xhr.statusText;

                            // Show error with SweetAlert
                            Swal.fire({
                                title: 'Error!',
                                text: errorMsg,
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });

                            // Specific error handling
                            if (xhr.status === 401) {
                                window.location.href = '/login';
                            }
                        }
                    });
                }
            });
        }
    </script>
}

